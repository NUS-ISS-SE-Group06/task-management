name: dev_test_build
on:
  # trigger for CI
  workflow_dispatch:
  # This workflow is automatically triggered upon a push request to the development branch. 
  # The test-build : indicating whether your code commits are not breaking during compilation.
  # The unit-test : indicating whether your functionalities are not breaking.
  # The Sonar : indicating whether your code commits are not violating code scan rules.
  ##
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'pom.xml'

jobs:
  test_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2
            target
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B clean package

  unit_test:
    needs: test_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2
            target
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Test with Maven
        run: mvn -B test

      - name: List Contents of target Directory
        run: ls -R target

  code_scan:
    needs: unit_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2
            target
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: List Contents of target Directory
        run: ls -R target

      - name: Cache SonarCloud Packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and analyze on SonarCloud
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

  snyk_security_scan:
    needs: code_scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4

      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb # Snyk action commit hash, we are using this specific version
        env:
          SNYK_TOKEN: ${{secrets.SNYK_TOKEN}}

        # Runs Snyk Code (SAST) analysis and uploads result into GitHub. Use || true to not fail the pipeline
      - name: Snyk Code test
        run: snyk code test --sarif --debug  > snyk-code.sarif # || true

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects

        # Runs Snyk Infrastructure as Code (IaC) analysis and uploads result to Snyk. Use || true to not fail the pipeline.
      - name: Snyk IaC test and report
        run: snyk iac test --report # || true

        # Build the docker image for testing
      - name: Build a Docker image
        run: docker build -t taskmanagement-test

        # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
      - name: Snyk Container monitor
        run: snyk container monitor taskmanagement-test --file=Dockerfile

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif



        

    
        

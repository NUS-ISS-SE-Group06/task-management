name: prd_deploy

on:
  # trigger for deployment
  workflow_dispatch:

jobs:
  create_prd_package:
    runs-on: ubuntu-latest
    env:
      STAGING_DIR: prd_staging
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2
            target
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: List Contents of target Directory
        run: ls -R target

      - name: Create Staging Directory
        run: |
          mkdir ${{ env.STAGING_DIR }}
          cp target/*.war ${{ env.STAGING_DIR }}

      - name: Upload Staging Artifact
        uses: actions/upload-artifact@v4
        with:
          name: uat_package
          path: ${{ env.STAGING_DIR }}
          overwrite: true
          if-no-files-found: error

  build-and-push:
    runs-on: ubuntu-latest
    needs: create_prd_package
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2
            target
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: List Contents of target Directory
        run: ls -R target

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          # Log in to Docker Hub using the username and password stored in GitHub Secrets
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          
          # Build and push the Docker image for multiple platforms (e.g., amd64 and arm64)
          docker buildx build --platform linux/amd64,linux/arm64 -t $DOCKER_USERNAME/taskmanagement-prd:${{ github.sha }} --push .

  deploy_to_digitalocean_kubernetes:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl (DigitalOcean CLI)
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.115.0/doctl-1.115.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin

      - name: Authenticate with DigitalOcean
        run: doctl auth init -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          doctl kubernetes cluster kubeconfig save 77c86425-2a82-4012-beda-18a1a12979ae

      - name: Update Image Tag in Deployment YAML
        run: |
          sed -i.bak "s|image: nusissgroup6/taskmanagement-prd:.*|image: nusissgroup6/taskmanagement-prd:${{ github.sha }}|" k8s/prd/service/taskmanagement_depl.yaml
          cat k8s/prd/service/taskmanagement_depl.yaml | grep "image:"

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/prd/service/taskmanagement_namespace.yaml
          kubectl apply -f k8s/prd/service/taskmanagement_secrets.yaml
          kubectl apply -f k8s/prd/service/taskmanagement_configmaps.yaml
          kubectl apply -f k8s/prd/service/taskmanagement_depl.yaml
          kubectl apply -f k8s/prd/service/taskmanagement_depl_hpa.yaml